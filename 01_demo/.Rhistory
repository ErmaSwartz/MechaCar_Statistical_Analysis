q()
q()
setwd("~/R")
> head(mpg)
head(mpg)
> plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2 plt + geom_bar() #plot a bar plot
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
library(tidyverse)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
library(tidyverse)
library(tidyverse)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
# build function with the mpg dataset
head(mpg)
plt + geom_bar() #plot a bar plot
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
plt + geom_bar() #plot a bar plot
plt <- ggplot(mpg,aes(x=class))
#import dataset into ggplot2
plt + geom_bar() #plot a bar plot
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=manufacturer,y=Vehicle_Count)) #import dataset into ggplot2
#plot a bar plot
plt + geom_col()
# change the titels of axes
#plot bar plot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset")
#plot a boxplot with labels
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") +
#rotate the x-axis label 45 degrees
theme(axis.text.x=element_text(angle=45,hjust=1))
#line plots
plt + geom_line()
library(tidyverse)
plt <- ggplot(mpg,aes(x=class)) #import dataset into ggplot2
#line plots
plt + geom_line()
View(plt)
#line plots
plt + geom_line() + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks = c(15:30)) #add line plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty)) #import dataset into ggplot2
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty))
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty))
# add scatter plot with labels
plt + geom_point() + xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)")
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class))
#add scatter plot with labels
#customize
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class")
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,shape=drv))
#add scatter plot with multiple aesthetics
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
#import dataset into ggplot2
plt <- ggplot(mpg,aes(y=hwy))
#add boxplot
plt + geom_boxplot()
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
#add boxplot and rotate x-axis labels 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#create summary table
mpg_summary <- mpg %>% group_by(class,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
#create heatmap with labels
plt <- ggplot(mpg_summary, aes(x=class,y=factor(year),fill=Mean_Hwy))
plt + geom_tile() + labs(x="Vehicle Class",y="Vehicle Year",fill="Mean Highway (MPG)")
#create summary table
mpg_summary <- mpg %>% group_by(model,year) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep')
plt <- ggplot(mpg_summary, aes(x=model,y=factor(year),fill=Mean_Hwy)) #import dataset into ggplot2
#add heatmap with labels
plt + geom_tile() + labs(x="Model",y="Vehicle Year",fill="Mean Highway (MPG)") + theme(axis.text.x = element_text(angle=90,hjust=1,vjust=.5)) #rotate x-axis labels 90 degrees
#import dataset into ggplot2
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
#add boxplot
plt + geom_boxplot() +
#rotate x-axis labels 45 degrees
theme(axis.text.x=element_text(angle=45,hjust=1)) +
#overlay scatter plot on top
geom_point()
#create summary table
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ), .groups = 'keep')
#import dataset into ggplot2
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
#add scatter plot
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size")
#import dataset into ggplot2
mpg_summary <- mpg %>% group_by(class) %>% summarize(Mean_Engine=mean(displ),SD_Engine=sd(displ), .groups = 'keep')
plt <- ggplot(mpg_summary,aes(x=class,y=Mean_Engine))
#add scatter plot with labels
plt + geom_point(size=4) + labs(x="Vehicle Class",y="Mean Engine Size") +
#overlay with error bars
geom_errorbar(aes(ymin=Mean_Engine-SD_Engine,ymax=Mean_Engine+SD_Engine))
#convert to long format
mpg_long <- mpg %>% gather(key="MPG_Type",value="Rating",c(cty,hwy))
head(mpg_long)
#import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#add boxplot with labels rotated 45 degrees
plt + geom_boxplot() + theme(axis.text.x=element_text(angle=45,hjust=1))
#import dataset into ggplot2
plt <- ggplot(mpg_long,aes(x=manufacturer,y=Rating,color=MPG_Type))
#create multiple boxplots, one for each MPG type
plt + geom_boxplot() + facet_wrap(vars(MPG_Type)) +
#rotate x-axis labels
theme(axis.text.x=element_text(angle=45,hjust=1),legend.position = "none") + xlab("Manufacturer")
#visualize distribution using density plot
ggplot(mtcars,aes(x=wt)) + geom_density()
# the quantitative test for normality
# uses a stats test to quantify the probability of whether or not the test data
# came from a normally distributed data set
?shapiro,test()
# the quantitative test for normality
# uses a stats test to quantify the probability of whether or not the test data
# came from a normally distributed data set
?shapiro.test()
#only requires numeric vector of values
shapiro.test(mtcars$wt)
#sample
?sample()
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
> plt <- ggplot(population_table,aes(x=log10(Miles_Driven))) #import dataset into ggplot2
> plt + geom_density() #visualize distribution using density plot
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
setwd("C:/Users/ermah/OneDrive/Desktop/Analysis/R-Analysis/01_demo")
#import used car dataset
population_table <- read.csv('used_car_data.csv',check.names = F,stringsAsFactors = F)
#import dataset into ggplot2
plt <- ggplot(population_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#create a sample dataset using dplyr's sample_n() function
?sample_n()
#randomly sample 50 data points
sample_table <- population_table %>% sample_n(50)
#import dataset into ggplot2
plt <- ggplot(sample_table,aes(x=log10(Miles_Driven)))
#visualize distribution using density plot
plt + geom_density()
#15.6.2
?t.test()
# #compare sample versus population means
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
#generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50)
#generate another 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50)
#generate 50 randomly sampled data points
sample_table <- population_table %>% sample_n(50)
#generate another 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50)
#test if the means are statistically different #compare means of two samples
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
#15.6.2
?t.test()
#import dataset
mpg_data <- read.csv('mpg_modified.csv')
#import dataset
mpg_data <- read.csv('mpg_modified.csv')
#select only data points where the year is 1999
mpg_1999 <- mpg_data %>% filter(year==1999)
#import dataset
mpg_data <- read.csv('mpg_modified.csv')
#select only data points where the year is 1999
mpg_1999 <- mpg_data %>% filter(year==1999)
##select only data points where the year is 2008
mpg_2008 <- mpg_data%>% filter(year==2008)
#import dataset
mpg_data <- read.csv('mpg_modified.csv')
#select only data points where the year is 1999
mpg_1999 <- mpg_data %>% filter(year==1999)
##select only data points where the year is 2008
mpg_2008 <- mpg_data%>% filter(year==2008)
#use a paired ttest to determine if there is stat difference in
#overall highway fuel efficieny
# compare the mean difference btwn the samples
t.test(mpg_1999$hwy, mpg_2008$hwy, paired = T)
?aov()
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c("hp","cyl")]
mtcars_filt$cyl <- factor(mtcars_filt$cyl) #convert numeric column to factor
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c("hp","cyl")]
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c("hp","cyl")]
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#compare means across multiple levels
aov(hp ~ cyl,data=mtcars_filt)
#filter columns from mtcars dataset
mtcars_filt <- mtcars[,c("hp","cyl")]
#convert numeric column to factor
mtcars_filt$cyl <- factor(mtcars_filt$cyl)
#compare means across multiple levels
aov(hp ~ cyl,data=mtcars_filt)
#use summary to get p-values
summary(aov(hp ~ cyl,data=mtcars_filt))
# correlation
?cor()
head(mtcars)
#import data set into ggplot
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
#create scatter plot
plt + geom_point()
#use the cor() function to quantify the strngth of the correlation
# btwn two variables
#calculate the correlation coefficient
cor(mtcars$hp,mtcars$qsec)
#use the used cars dataset for another example
#read in dataset
used_cars <- read.csv('used_car_data.csv, stringsAsFactors = F)
#use the used cars dataset for another example
#read in dataset
used_cars <- read.csv('used_car_data.csv, stringsAsFactors = F)
# testing whether or not vehicle miles driven and selling price are correlated
#import data into ggplot
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_price))
#use the used cars dataset for another example
#read in dataset
used_cars <- read.csv('used_car_data.csv, stringsAsFactors = F)
# testing whether or not vehicle miles driven and selling price are correlated
#import data into ggplot
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_price))
#create a scatter plot
plt + geom_point()
#read in dataset
used_cars <- read.csv('used_car_data.csv, stringsAsFactors = F)
# testing whether or not vehicle miles driven and selling price are correlated
#import data into ggplot
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_price))
#create a scatter plot
plt + geom_point()
#use the used cars dataset for another example
#read in dataset
used_cars <- read.csv('used_car_data.csv, stringsAsFactors = F)
# testing whether or not vehicle miles driven and selling price are correlated
#import data into ggplot
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_price))
#create a scatter plot
plt + geom_point()
#use the used cars dataset for another example
#read in dataset
used_cars <- read.csv('used_car_data.csv, stringsAsFactors = F)
# testing whether or not vehicle miles driven and selling price are correlated
#import data into ggplot
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_price))
#create a scatter plot
plt + geom_point()
#use the used cars dataset for another example
#read in dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
# testing whether or not vehicle miles driven and selling price are correlated
#import data into ggplot
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_price))
#create a scatter plot
plt + geom_point()
#use the used cars dataset for another example
#read in dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
# testing whether or not vehicle miles driven and selling price are correlated
#import data into ggplot
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
#create a scatter plot
plt + geom_point()
#use the used cars dataset for another example
#read in dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
# testing whether or not vehicle miles driven and selling price are correlated
#import data into ggplot
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
#create a scatter plot
plt + geom_point()
#use the used cars dataset for another example
#read in dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
# testing whether or not vehicle miles driven and selling price are correlated
#import data into ggplot
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
#create a scatter plot
plt + geom_point()
#calculate the pearson correlation coeficient
cor(used_cars$Miles_drive,used_cars$Selling_Price)
#use the used cars dataset for another example
#read in dataset
used_cars <- read.csv('used_car_data.csv',stringsAsFactors = F)
# testing whether or not vehicle miles driven and selling price are correlated
#import data into ggplot
plt <- ggplot(used_cars,aes(x=Miles_Driven,y=Selling_Price))
#create a scatter plot
plt + geom_point()
#calculate the pearson correlation coeficient
cor(used_cars$Miles_Driven,used_cars$Selling_Price)
#convert data frame into numeric matrix
used_matrix <- as.matrix(used_cars[,c("Selling_Price","Present_Price","Miles_Driven")])
cor(used_matrix)
# linear regression
?lm()
#create linear model
lm(qsex ~ hp,mtcars)
#create linear model
lm(qsec ~ hp,mtcars)
#use summary to find p-value and r-squared
# summarize linear model
summary(lm(qsec~hp,mtcars))
#visualize regression
#create linear model
model <- lm(qsec~ hp,mtcars)
#visualize regression
#create linear model
model <- lm(qsec~ hp,mtcars)
#determine y-axis values from linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
#visualize regression
#create linear model
model <- lm(qsec~ hp,mtcars)
#determine y-axis values from linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
#import dataset into ggplot
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
#visualize regression
#create linear model
model <- lm(qsec~ hp,mtcars)
#determine y-axis values from linear model
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept)']
#import dataset into ggplot
plt <- ggplot(mtcars,aes(x=hp,y=qsec))
# plot scatter and linear model
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
## generate multiple liner regression model
lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars)
#generate summary statistics
summary(lm(qsec ~ mpg + disp + drat + wt + hp,data=mtcars))
?chisq.test()
?chisq.test()
# generate contingency table
table(mpg$class,mpg$year)
#pass the contingency table to the chisq.test function
#generate contingency table
tbl <- table(mpg$class,mpg$year)
#compare categorical distributions
chisq.test(tbl)
#compare categorical distributions
chisq.test(tbl)
